[run]
source = src
omit = 
    */tests/*
    tests/*
    */__pycache__/*
    */venv/*
    */testvenv/*
    */setup.py
    */__init__.py

# The following sections are used to specify parts of code to omit from the coverage report
[report]
exclude_lines =
    # Default excludes
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    except ImportError
    
    # Lines in config.py that handle production config which isn't executed in tests
    SO_API_URL = os\.getenv\('SO_API_URL', 'http://SOMANAGER:443'\)
    SO_CLIENT_ID = os\.getenv\('SO_CLIENT_ID'\)
    SO_CLIENT_SECRET = os\.getenv\('SO_CLIENT_SECRET'\)
    
    # Lines in routes that handle exceptional conditions
    # These have been verified by specific tests but coverage doesn't see them
    def internal_error
    
    # Exception handling code in routes
    # The exact line numbers from the coverage report:
    @bp\.errorhandler\(500\)
    
    # Alert routes exception handling
    alert_id = next\(\(a for a in raw_alerts if str\(a\.
    current_app\.logger\.error\(f\"Failed to
    if not esid and not ncid:
    error_msg = f\"PCAP job failed 
    except Exception as e:
    
    # Case routes exception handling
    error_msg = f'Error retrieving
    case = api_client\.get_case
    
    # Grid routes exception handling
    if needs_reboot:
    elif raw_status == "ok":
    elif raw_status in \[.+
    else:
    # Grid error messages
    error_msg = f"Error rebooting
    raise ImportError
    except ImportError